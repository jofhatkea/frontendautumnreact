{"version":3,"sources":["components/Profile.jsx","components/Header.jsx","components/AddPostForm.jsx","components/AddCommentForm.jsx","components/Comment.jsx","components/Post.jsx","components/Feed.jsx","components/Footer.jsx","serviceWorker.js","index.js","App.js"],"names":["Profile","props","name","Header","AddPostForm","useState","author","setAuthor","message","setMessage","onSubmit","e","preventDefault","fetch","baseURL","method","headers","body","JSON","stringify","likes","then","json","data","onPostAdded","type","value","onChange","target","AddCommentForm","Comment","comment","Post","className","comments","map","key","_id","Feed","posts","item","Footer","Boolean","window","location","hostname","match","ReactDOM","render","setPosts","useEffect","console","log","copy","concat","length","style","width","count","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61d522f0.chunk.js","sourcesContent":["import React from \"react\";\nexport default function Profile(props) {\n  return <h2>Hello {props.name}</h2>;\n}\n","import React from \"react\";\nimport Profile from \"./Profile\";\nexport default function Header(props) {\n  return (\n    <header>\n      HEADER:\n      <Profile name={props.name} />\n    </header>\n  );\n}\n","import React, { useState } from \"react\";\nexport default function AddPostForm(props) {\n  const [author, setAuthor] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  /*function onAuthorChange(e){\n  \n    }*/\n  const onAuthorChange = e => {\n    setAuthor(e.target.value);\n  };\n  const onMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const baseURL = \"https://frontendautmn2019-5ad1.restdb.io/rest/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d887443fd86cb75861e25ee\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts\", {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\n        author: author,\n        message: message,\n        likes: 0\n      })\n    })\n      .then(e => e.json())\n      .then(data => {\n        props.onPostAdded(data);\n        //console.log(e);\n      });\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <h2>AddPostForm</h2>\n      <label>\n        <input\n          type=\"text\"\n          name=\"author\"\n          value={author}\n          onChange={onAuthorChange}\n        />\n      </label>\n      <textarea value={message} onChange={onMessageChange}></textarea>\n      <input type=\"submit\" value=\"Say what you think\" />\n    </form>\n  );\n}\n","import React from \"react\";\nexport default function AddCommentForm() {\n  return (\n    <form>\n      <h2>AddCommentForm</h2>\n      <textarea></textarea>\n    </form>\n  );\n}\n","import React from \"react\";\nexport default function Comment(props) {\n  return (\n    <li>\n      {props.author} said {props.comment}\n    </li>\n  );\n}\n","import React, { useState } from \"react\";\nimport AddCommentForm from \"./AddCommentForm\";\nimport Comment from \"./Comment\";\n\nexport default function Post(props) {\n  let [likes, setLikes] = useState(0);\n  function updateLikes() {\n    setLikes(likes + 1);\n  }\n  return (\n    <article className=\"post\">\n      <h2>{props.author}</h2>\n      <p>{props.message}</p>\n      <button>{props.likes} likes</button>\n      <AddCommentForm />\n      <ol>\n        {props.comments.map(comment => {\n          return (\n            <Comment\n              key={comment._id}\n              author={comment.author}\n              comment={comment.comment}\n            />\n          );\n        })}\n      </ol>\n    </article>\n  );\n}\n","import React from \"react\";\nimport AddPostForm from \"./AddPostForm\";\nimport Post from \"./Post\";\nexport default function Feed(props) {\n  return (\n    <section>\n      FEED\n      <AddPostForm onPostAdded={props.onPostAdded} />\n      {props.posts.map(item => {\n        return (\n          <Post\n            key={item._id}\n            comments={item.comments}\n            likes={item.likes}\n            message={item.message}\n            author={item.author}\n          />\n        );\n      })}\n    </section>\n  );\n}\n","import React from \"react\";\nexport default function Footer(props) {\n  return <footer>FOOTER: signed in as {props.name}</footer>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\n\nimport Skeleton from \"react-loading-skeleton\";\n\nimport Header from \"./components/Header\";\nimport Feed from \"./components/Feed.jsx\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nexport default function App() {\n  const name = \"Jonas\"; // pass this to <Profile /> and <Footer />\n\n  const [posts, setPosts] = useState([]);\n  const [loggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    const baseURL = \"https://frontendautmn2019-5ad1.restdb.io/rest/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d887443fd86cb75861e25ee\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts?fetchchildren=true\", {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setPosts(e));\n  }, []);\n\n  /*function addPost() {\n    const copy = posts.concat({\n      message: \"very strange\",\n      author: \"everybody\"\n    });\n    setPosts(copy);\n  }*/\n  function addNewPost(data) {\n    console.log(data);\n    data.comments = [];\n    const copy = posts.concat(data);\n    setPosts(copy);\n  }\n  return (\n    <div className=\"App\">\n      <Header name={name} />\n\n      <Feed onPostAdded={addNewPost} posts={posts} />\n      {posts.length === 0 && (\n        <div\n          style={{\n            width: \"200px\"\n          }}\n        >\n          <Skeleton count={10} />\n        </div>\n      )}\n\n      <Footer name={name} />\n    </div>\n  );\n}\n"],"sourceRoot":""}